<div id="generateAiModal" class="fixed inset-0 z-50 flex hidden">
  <div style="margin-top: 7rem;" class="relative p-6 bg-gray-100 rounded-lg shadow-lg max-w-lg mt-24 mx-auto">
    <!-- モーダルのヘッダー -->
    <div class="flex justify-between items-center pb-3 border-b border-gray-300">
      <h3 class="text-xl font-semibold text-pink-300">ツンデレ言葉生成</h3>
      <button type="button" id="closeModal" class="text-gray-400 hover:text-gray-900">
        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 384 512">
          <path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/>
        </svg>
        <span class="sr-only">Close</span>
      </button>
    </div>

    <div id="modal-input" class="p-6 space-y-4 relative">
      <%= form_with model: @generate_ai_form, url: generate_ai_posts_path, html: { id: 'generateAiForm' } do |f| %>
        <div>
          <%= f.label :recipient, "誰に", class: "block text-xm font-medium" %>
          <%= f.text_field :recipient, required: true, class: "input input-bordered w-full mt-1", autocomplete: "off" %>
        </div>
        <div>
          <%= f.label :message, "どんな事を伝えたい？", class: "block text-xm font-medium mt-2" %>
          <%= f.text_field :message, required: true, class: "input input-bordered w-full mt-1", autocomplete: "off" %>
        </div>
        <div>
          <%= f.label :tone, "ツン具合", class: "block text-xm font-medium mt-2" %>
          <%= f.select :tone, [["かなりツン", "かなりツン"], ["ややツン", "ややツン"], ["あまあま", "あまあま"]], {}, class: "select select-bordered w-full mt-1" %>
        </div>
        <div class="pt-4">
          <%= f.submit "自動生成する", id: 'generateFetchButton', class: "btn btn-secondary opacity-50 w-full" %>
        </div>
      <% end %>
      <div id="modal-loading" style="display: none;" class="absolute inset-0 flex flex-col items-center justify-center bg-gray-100">
        <div role="status">
          <svg aria-hidden="true" class="inline w-20 h-20 text-gray-200 animate-spin dark:text-gray-600 fill-pink-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
              <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
          </svg>
        </div>
        <p class="text-lg font-semibold text-gray-700 mt-6">Loading...</p>
      </div>
    </div>
    <div id="modal-output" style="display: none;" class="pt-6 px-6 py-3 space-y-4 relative">
      <div class="flex flex-col">
        <label for="generatedText" class="block text-xm font-medium">生成された言葉:</label>
        <textarea id="generatedText" readonly class="input input-bordered w-full mt-3 overflow-hidden resize-none"></textarea>
        <button id="usePhraseButton" class="btn btn-outline btn-secondary opacity-50 w-full mt-3">この言葉を使う</button>
        <button id="regenerateButton" class="btn btn-outline btn-secondary opacity-50 w-full mt-1">再生成する</button>
        <button id="closeModalButton" class="btn btn-outline btn-secondary opacity-50 w-full mt-1">やっぱり自分で考える</button>
      </div>
    </div>
  </div>
</div>
<script>
  function adjustTextareaHeight() {
    const generatedText = document.getElementById("generatedText");
    if (generatedText) {
      generatedText.style.height = "auto"; // 高さをリセット
      generatedText.style.height = generatedText.scrollHeight + "px"; // 内容に応じた高さを設定
    }
  }
  document.addEventListener("turbo:load", function() {
    const modalInput = document.getElementById("modal-input");
    const modalOutput = document.getElementById("modal-output");
    const generatedText = document.getElementById("generatedText");
    const generateModal = document.getElementById("generateAiModal");
    const generateFetchButton = document.getElementById("generateFetchButton");
    const form = document.getElementById("generateAiForm");
    const modalLoading = document.getElementById("modal-loading");
    const closeModal = document.getElementById("closeModal");

    let modal_recipient = "";

    // モーダルの閉じるボタンで非表示
    closeModal.addEventListener("click", function() {
      generateModal.style.display = "none";
    });

    generateFetchButton.addEventListener("click", async function(event) {
      event.preventDefault(); // 通常のフォーム送信を防ぐ
      modalLoading.style.display = "";

      // フォームデータの取得
      const formData = new FormData(form);
      const data = {
        recipient: formData.get("generate_ai_form[recipient]"),
        message: formData.get("generate_ai_form[message]"),
        tone: formData.get("generate_ai_form[tone]")
      };

      modal_recipient = data.recipient;

      try {
        const response = await fetch(form.action, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').getAttribute("content")
          },
          body: JSON.stringify({ generate_ai_form: data })
        });

        if (response.ok) {
          const result = await response.json();
          generatedText.value = result.generated_text;
          modalInput.style.display = "none";
          modalOutput.style.display = "";
          adjustTextareaHeight();
        } else {
          console.error("エラーが発生しました");
        }
      } catch (error) {
        console.error("リクエストに失敗しました", error);
      }
    });

    // ボタン要素
    const usePhraseButton = document.getElementById("usePhraseButton");
    const regenerateButton = document.getElementById("regenerateButton");
    const closeModalButton = document.getElementById("closeModalButton");

    // 「この言葉を使う」ボタンの動作
    usePhraseButton.addEventListener("click", function() {
      document.getElementById("post-body").value = generatedText.value;
      document.getElementById("post-sendername").value = modal_recipient;
      generateModal.style.display = "none";
    });

    // 「再生成する」ボタンの動作
    regenerateButton.addEventListener("click", function() {
      modalOutput.style.display = "none";
      modalInput.style.display = "";
      modalLoading.style.display = "none";
    });

    // 「やっぱり自分で考える」ボタンの動作
    closeModalButton.addEventListener("click", function() {
      generateModal.style.display = "none";
    });
  });
</script>
